<?php
/**
 * @file
 * JSON Log module.
 */

/**
 * Default max. length of a log entry, in kilobytes.
 *
 * @type integer
 */
define('JSONLOG_TRUNCATE_DEFAULT', 4);

/**
 * Adds this module's setting fields to the standard logging settings form.
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array &$form
 * @param array &$form_state
 */
function jsonlog_form_system_logging_settings_alter(&$form, &$form_state) {
  drupal_add_css(
    drupal_get_path('module', 'jsonlog') . '/jsonlog.css',
    array('type' => 'file', 'group' => CSS_DEFAULT, 'preprocess' => FALSE, 'every_page' => FALSE)
  );

  // Server environment vars are used and overrule everything, if server var 'drupal_jsonlog_server_conf'.
  $server_conf = getenv('drupal_jsonlog_server_conf') ? 1 : 0;

  // Defaults.
  $siteid_default = _jsonlog_default_site_id();
  if (!($file_default = _jsonlog_default_file())) {
    drupal_set_message(t('Failed to establish the server\'s default logging directory.', array(), array('context' => 'module:jsonlog')), 'error');
  }

  // This translation is used a lot.
  $t_siteId = t('Site ID', array(), array('context' => 'module:jsonlog'));

  // Using emergency as threshold is simply not an option; because it's falsy (expensive type checks, FALSE), and wouldn't make sense anyway.
  $severity_levels = watchdog_severity_levels();
  unset($severity_levels[0]);

  $form['jsonlog'] = array(
    '#type' => 'fieldset',
    '#title' => 'JSON Log',
    '#description' => (!$server_conf ? t('Set server environment variable \'drupal_jsonlog_server_conf\' to prevent local admins from configuring JSON Log.', array(), array('context' => 'module:jsonlog')) :
        t('The server environment variable \'drupal_jsonlog_server_conf\' is set, so JSON Log is not configurable via this form (nor by Drupal conf vars as such).', array(), array('context' => 'module:jsonlog'))
      )
      . '<br/>' . t('Tip: A server environment variable set in virtual host or .htaccess won\'t be visible by drush/CLI; /etc/environment might be your friend instead.', array('!break' => '<br/>'), array('context' => 'module:jsonlog')),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    'jsonlog_severity_threshold' => array(
      '#type' => 'select',
      '#title' => t('Don\'t log events that are less severe than', array(), array('context' => 'module:jsonlog')),
      '#description' => t('Emergency is not an option.', array(), array('context' => 'module:jsonlog')),
      '#options' => $severity_levels,
      '#default_value' => $server_conf && ($v = getenv('drupal_jsonlog_severity_threshold')) ? $v :
          variable_get('jsonlog_severity_threshold', WATCHDOG_WARNING),
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    ),
    'jsonlog_truncate' => array(
      '#type' => 'textfield',
      '#title' => t('Truncate events to'),
      '#description' => t(
        'Zero means no truncation.!breakLog entries longer than the file system\'s block size may result in garbled logs, due to concurrent file writes.!breakThe default block size of ext3 (common *nix file system) is !default Kb.',
        array(
          '!default' => JSONLOG_TRUNCATE_DEFAULT,
          '!break' => '<br/>',
        ),
        array('context' => 'module:jsonlog')
      ),
      '#default_value' => $server_conf && ($v = getenv('drupal_jsonlog_truncate')) !== FALSE ? $v :
          variable_get('jsonlog_truncate', JSONLOG_TRUNCATE_DEFAULT),
      '#size' => 5,
      '#field_suffix' => t('Kb', array(), array('context' => 'module:jsonlog')),
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    ),
    'jsonlog_siteid' => array(
      '#type' => 'textfield',
      '#title' => $t_siteId,
      '#description' => t(
        'Spaces and quotes get replaced by hyphens.!breakDefaults to the server\'s hostname and the site\'s database name and prefix (if any):!break!default',
        array(
          '!default' => '&nbsp; ' . $siteid_default,
          '!break' => '<br/>',
        ),
        array('context' => 'module:jsonlog')
      ),
      '#default_value' => $server_conf && ($v = getenv('drupal_jsonlog_siteid')) ? $v : variable_get('jsonlog_siteid', $siteid_default),
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    ),
    'jsonlog_file' => array(
      '#type' => 'textfield',
      '#title' => t('Log file'),
      '#description' => t(
        'Defaults to PHP ini \'error_log\' path + /drupal-jsonlog/ + !site_id:!break!default!breakNB: The web server user (www-data|apache) probably isn\'t allowed to write to a file in the \'error_log\' path!break- create a sub dir (like \'drupal-jsonlog\') as root user, and do a chown or chmod on that sub dir.',
        array(
          '!default' => '&nbsp; ' . $file_default,
          '!site_id' => $t_siteId,
          '!break' => '<br/>',
        ),
        array('context' => 'module:jsonlog')
      ),
      '#default_value' => $server_conf && ($v = getenv('drupal_jsonlog_file')) ? $v : variable_get('jsonlog_file', $file_default),
      '#size' => 100,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    ),
    'jsonlog_format_version' => array(
      '#type' => 'textfield',
      '#title' => t('JSON format version'),
      '#description' => t('Version no. of the fields format out-lined below.'),
      '#default_value' => $server_conf && ($v = getenv('drupal_jsonlog_format_version')) ? $v : variable_get('jsonlog_format_version', 1),
      '#size' => 10,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    ),
    'jsonlog_fields' => array(
      '#type' => 'fieldset',
      '#title' => t('JSON field names', array(), array('context' => 'module:jsonlog')),
      '#description' => t(
        'Watchdog\'s native field names might not make sense in a non-Drupal environment (e.g. ip).!breakAnd some log utilities require special field names (like !logstash: @timestamp).',
        array('!break' => '<br/>', '!logstash' => l('logstash', 'http://logstash.net/', array('attributes' => array('target' => '_blank')))),
        array('context' => 'module:jsonlog')
      ),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      'legend' => array(
        '#type' => 'textfield',
        '#title' => t('Property', array(), array('context' => 'module:jsonlog')),
        '#default_value' => t('field-name', array(), array('context' => 'module:jsonlog')),
        '#size' => 15,
        '#field_prefix' => t('native', array(), array('context' => 'module:jsonlog')),
        '#field_suffix' => t('recommended', array(), array('context' => 'module:jsonlog')),
        '#attributes' => array(
          'autocomplete' => 'off',
          'readonly' => 'readonly',
        ),
      ),
    ),
  );
  // All readonly if server environment conf.
  if ($server_conf) {
    foreach ($form['jsonlog'] as $key => &$field) {
      if ($key{0} !== '#') {
        $field['#attributes']['disabled'] = 'disabled';
      }
    }
    unset($field); // Iteration ref.
  }

  // Make ISO 8601 timestamp for timestamp label.
  $millis = round(microtime(TRUE) * 1000);
  $seconds = (int) floor($millis / 1000);
  $millis -= $seconds * 1000;
  $millis = str_pad($millis, 3, '0', STR_PAD_LEFT);
  $timestamp = substr(gmdate('c', $seconds), 0, 19) . '.' . $millis . 'Z';

  // JSON fields.
  $json_fields = array(
    'message' => array(
      'label' => t('Message', array(), array('context' => 'module:jsonlog')),
    ),
    'timestamp' => array(
      'label' => t('Timestamp !span(!time)!_span', array('!time' => $timestamp, '!span' => '<span>', '!_span' => '</span>'), array('context' => 'module:jsonlog')),
      'name' => '@timestamp',
    ),
    'version' => array(
      'custom' => TRUE,
      'name' => '@version',
      'label' => t('Version !span(of this format)!_span', array('!span' => '<span>', '!_span' => '</span>'), array('context' => 'module:jsonlog')),
    ),
    'event_id' => array(
      'custom' => TRUE,
      'name' => 'event_id',
      'label' => t(
        'Event ID !span(!site_id + unique ID)!_span',
        array('!site_id' => $t_siteId, '!span' => '<span>', '!_span' => '</span>'),
        array('context' => 'module:jsonlog')
      ),
    ),
    'site_id' => array(
      'custom' => TRUE,
      'name' => 'site_id',
      'label' => $t_siteId,
    ),
    'type' => array(
      'label' => t('Type', array(), array('context' => 'module:jsonlog')),
    ),
    'severity' => array(
      'label' => t('Severity', array(), array('context' => 'module:jsonlog')),
    ),
    'method' => array(
      'custom' => TRUE,
      'name' => 'method',
      'label' => t('Request method !span(GET, POST, cli)!_span', array('!span' => '<span>', '!_span' => '</span>'), array('context' => 'module:jsonlog')),
    ),
    'request_uri' => array(
      'label' => t('Request URI', array(), array('context' => 'module:jsonlog')),
    ),
    'referer' => array(
      'label' => t('Referer', array(), array('context' => 'module:jsonlog')),
    ),
    'uid' => array(
      'label' => t('User ID', array(), array('context' => 'module:jsonlog')),
    ),
    'username' => array(
      'custom' => TRUE,
      'name' => 'username',
      'label' => t('Username !span(when not anonymous user)!_span', array('!span' => '<span>', '!_span' => '</span>'), array('context' => 'module:jsonlog')),
    ),
    'ip' => array(
      'name' => 'client_ip',
      'label' => t('User\'s I.P. address', array(), array('context' => 'module:jsonlog')),
    ),
    'link' => array(
      'label' => t('Link', array(), array('context' => 'module:jsonlog')),
    ),
    'variables' => array(
      'label' => t('Variables', array(), array('context' => 'module:jsonlog')),
    ),
    'truncation' => array(
      'custom' => TRUE,
      'name' => 'trunc',
      'label' => t('Truncation !span(original/truncated length of message)!_span', array('!span' => '<span>', '!_span' => '</span>'), array('context' => 'module:jsonlog')),
    ),
  );

  $field_names = variable_get('jsonlog_fields', array());

  foreach ($json_fields as $name => $props) {
    $form['jsonlog']['jsonlog_fields'][$name] = array(
      '#type' => 'textfield',
      '#title' => $props['label'],
      '#default_value' => !empty($field_names[$name]) ? $field_names[$name] : (!empty($props['name']) ? $props['name'] : $name),
      '#field_prefix' => empty($props['custom']) ? $name : '&nbsp;',
      '#field_suffix' => !empty($props['name']) ? $props['name'] : '&nbsp;',
      '#required' => !$server_conf,
      '#size' => 15,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    );
    if ($server_conf) {
      $form['jsonlog']['jsonlog_fields'][$name]['#attributes']['disabled'] = 'disabled';
    }
  }

  // Prepend our submit handler; we need to get in first, otherwise our changes to form values amounts to nothing.
  array_unshift($form['#submit'], 'jsonlog_form_system_logging_settings_submit');
}

/**
 * @param array $form
 * @param array $form_state
 */
function jsonlog_form_system_logging_settings_submit($form, &$form_state) {
  $values =& $form_state['values'];

  $fields = array(
    'jsonlog_severity_threshold',
    'jsonlog_truncate',
    'jsonlog_siteid',
    'jsonlog_file',
    'jsonlog_format_version',
  );

  // If server environment vars rule: don't save any var.
  if (getenv('drupal_jsonlog_server_conf')) {
    foreach ($fields as $name) {
      unset($form_state['input'][$name], $values[$name]);
    }
    unset($form_state['input']['jsonlog_fields'], $values['jsonlog_fields']);

    $file = _jsonlog_default_file();
  }
  // Otherwise: trim all values.
  else {
    foreach ($fields as $name) {
      $values[$name] = trim($values[$name]);
    }
    foreach ($values['jsonlog_fields'] as &$value) {
      $value = trim($value);
    }
    unset($value); // Iteration ref.

    if (!$values['jsonlog_truncate'] || $values['jsonlog_truncate'] < 0) {
      $values['jsonlog_truncate'] = 0;
    }

    // Don't ever save this field, which is only used as legend.
    unset($form_state['input']['jsonlog_fields']['legend'], $values['jsonlog_fields']['legend']);

    $file = $values['jsonlog_file'];
  }

  // Test.
  _jsonlog_test_filing($file);
}

/**
 * Establish default site ID.
 *
 * @return string
 */
function _jsonlog_default_site_id() {
  if (getenv('drupal_jsonlog_server_conf') && ($site_id = getenv('drupal_jsonlog_siteid'))) {
    return $site_id;
  }

  // Server's hostname + database name + database prefix (if any).
  $db =& $GLOBALS['databases']['default']['default'];
  $site_id = drupal_strtolower(preg_replace('/[^\w\d\.\-_]/', '-', gethostname()))
    . '__' . $db['database']
    . (!$db['prefix'] ? '' : ('__' . $db['prefix']));
  unset($db); // Clear ref.

  return $site_id;
}

/**
 * Establish default logging file path.
 *
 * @return string
 *   Empty upon failure.
 */
function _jsonlog_default_file() {
  if (getenv('drupal_jsonlog_server_conf') && ($file = getenv('drupal_jsonlog_file'))) {
    return $file;
  }

  // Default web server log dir for common *nix distributions.
  $default_log_dirs = array(
    'debian' => '/var/log/apache2',
    'redhat' => '/var/log/httpd',
  );

  $dir = '';
  if (!($server_log = ini_get('error_log')) || $server_log === 'syslog') {
    // Try default web server log dirs for common *nix distributions.
    foreach ($default_log_dirs as $val) {
      if (file_exists($val)) {
        $dir = $val;
        break;
      }
    }
  }
  else {
    $dir = str_replace('\\', '/', dirname($server_log));
  }

  if ($dir) {
    return $dir . '/drupal-jsonlog/' . variable_get('jsonlog_siteid', _jsonlog_default_site_id()) . '.log.json';
  }
  return '';
}

/**
 * Sets drupal message.
 *
 * @see _jsonlog_default_file()
 *
 * @param string $file
 *   Default: empty (~ use default file location algo)
 *
 * @return boolean
 */
function _jsonlog_test_filing($file = '') {
  if (!$file) {
    if (!($file = variable_get('jsonlog_file'))) {
      if (!($_file = _jsonlog_default_file())) {
        drupal_set_message(t('jsonlog: Failed to establish the server\'s default logging directory.', array(), array('context' => 'module:jsonlog')), 'error');
        return FALSE;
      }
    }
  }

  $dir = dirname($file);
  if ($dir === '') {
    drupal_set_message(t('jsonlog: Log directory path name is empty.', array(), array('context' => 'module:jsonlog')), 'error');
    return FALSE;
  }
  if (!file_exists($dir)) {
    drupal_set_message(
      t(
        'jsonlog: Log directory \'!dir\' doesn\'t exist.',
        array('!dir' => $dir),
        array('context' => 'module:jsonlog')
      ),
      'error'
    );
    return FALSE;
  }
  if (!file_exists($file)) {
    if (!touch($file)) {
      drupal_set_message(
        t(
          'jsonlog: Failed to create log file \'!file\'.',
          array('!file' => $file),
          array('context' => 'module:jsonlog')
        ),
        'error'
      );
      return FALSE;
    }
  }
  elseif (!is_writable($file)) {
    drupal_set_message(
      t(
        'jsonlog: Cannot write to log file \'!file\'.',
        array('!file' => $file),
        array('context' => 'module:jsonlog')
      ),
      'error'
    );
    return FALSE;
  }

  // Temporarily set the conf var to test value
  // - otherwise jsonlog_watchdog() would still use the old value for this write.
  $original_file = variable_get('jsonlog_file', '');
  variable_set('jsonlog_file', $file);
  try {
    watchdog(
      'jsonlog',
      'Testing watchdog logging - please check if this entry was written to file \'!file\'.',
      array('!file' => $file),
      variable_get('jsonlog_severity_threshold', WATCHDOG_WARNING)
    );
  }
  catch (Exception $xc) {
    // Ignore; some watchdog implementation failed, and (probably) threw a (database) PDOException.
  }
  // Restore original value.
  // Except if server env. vars rules, then we must (oddly) keep the new value.
  if (!getenv('drupal_jsonlog_server_conf')) {
    variable_set('jsonlog_file', $original_file);
  }

  drupal_set_message(
    t(
      'jsonlog: Logging to \'!file\' seems to work, but please check if that file now contains an entry whose message starts with \'Testing watchdog logging\'.',
      array('!file' => $file),
      array('context' => 'module:jsonlog')
    ),
    'warning'
  );

  return TRUE;
}

/**
 * Implements hook_watchdog().
 *
 * @param array $log_entry
 */
function jsonlog_watchdog(array $log_entry) {
  static $_server_conf, $_threshold, $_truncate, $_site_id, $_file, $_version, $_fields, $_severity;

  // Don't load more settings than threshold, in case current entry isn't sufficiently severe.
  if ($_threshold === NULL) {
    // Server environment variables rule?
    // Except siteid and file will always be overridable by Drupal conf var, because the default is conditioned by context.
    $_server_conf = getenv('drupal_jsonlog_server_conf');

    if ($_server_conf) {
      if (!($_threshold = getenv('drupal_jsonlog_severity_threshold'))) {
        $_threshold = WATCHDOG_WARNING;
      }
      else {
        $_threshold = variable_get('jsonlog_severity_threshold', WATCHDOG_WARNING);
      }
    }
  }
  if ($log_entry['severity'] > $_threshold) { // Severity is upside down; less is more.
    return;
  }

  // Load the rest of the settings.
  if (!$_site_id) {
    // If site ID setting doesnt exist: get default (and save it - even if server vars rule).
    if (!($_site_id = variable_get('jsonlog_siteid'))) {
      if ($_server_conf && ($_site_id = getenv('drupal_jsonlog_siteid'))) {
        variable_set('jsonlog_siteid', $_site_id);
      }
      else {
        variable_set('jsonlog_siteid', $_site_id = _jsonlog_default_site_id());
      }
    }

    // Truncate.
    if ($_server_conf) {
      if (($_truncate = getenv('drupal_jsonlog_truncate')) === FALSE) {
        $_truncate = JSONLOG_TRUNCATE_DEFAULT;
      }
    }
    else {
      $_truncate = variable_get('jsonlog_truncate', JSONLOG_TRUNCATE_DEFAULT);
    }
    if ($_truncate) {
      // Kb to bytes.
      $_truncate *= 1024;
      // Substract estimated max length of everything but message content.
      $_truncate -= 640;
      // Message will get longer when JSON encoded, because of hex encoding of <>&" chars.
      $_truncate *= 7 / 8;
    }

    // If file setting doesnt exist: get default (and save it - even if server vars rule).
    if (!($_file = variable_get('jsonlog_file'))) {
      if (($_server_conf && ($_file = getenv('drupal_jsonlog_file'))) || ($_file = _jsonlog_default_file())) {
        variable_set('jsonlog_file', $_file);
      }
      else {
        error_log('Drupal jsonlog, site ID[' . $_site_id . '], failed to establish server\'s default log dir.');
      }
    }

    // Fields and (rubbish) version.
    $_fields = array(
      'message' => 'message',
      'timestamp' => '@timestamp',
      'version' => '@version',
      'event_id' => 'event_id',
      'site_id' => 'site_id',
      'type' => 'type',
      'severity' => 'severity',
      'method' => 'method',
      'request_uri' => 'request_uri',
      'referer' => 'referer',
      'uid' => 'uid',
      'username' => 'username',
      'ip' => 'client_ip',
      'link' => 'link',
      'variables' => 'variables',
      'truncation' => 'trunc',
    );
    if ($_server_conf) {
      if (!($_version = getenv('drupal_jsonlog_format_version'))) {
        $_version = 1;
      }
      if (($fields = getenv('drupal_jsonlog_fields')) && ($fields = unserialize($fields))) {
        $_fields = $fields;
      }
    }
    else {
      $_version = variable_get('jsonlog_format_version', 1);
      $_fields = variable_get('jsonlog_fields', $_fields);
    }

    $_severity = array(
      'emergency',
      'alert',
      'critical',
      'error',
      'warning',
      'notice',
      'info',
      'debug',
    );
  }


  // Create the entry.

  $entry = new stdClass();

  // Strip tags if message starts with < (Inspect logs in tag).
  if (($message = $log_entry['message']) && $message{0} === '<') {
    $message = strip_tags($message);
  }
  // Escape newline, (drupal_)json_encode() doesn't escape control characters (Inspect uses newline).
  // Escape null control char.
  $message = str_replace(array("\n", "\0"), array('\\n', '_NUL_'), $message);

  // If truncation required, start by skipping variables.
  $variables = $log_entry['variables'];

  // Truncate message.
  if ($_truncate && ($le = strlen($message)) > $_truncate) { // Deliberately not drupal_strlen(); need 'physical' length, not (possibly shorter) multibyte length.
    // Flag variables truncated by setting it to false.
    if ($variables) {
      $variables = FALSE;
    }
    // Truncate multibyte safe until ASCII length is equal to/less than max. byte length.
    $truncation = array(
      $le,
      strlen($message = drupal_truncate_bytes($message, (int) $_truncate))
    );
  }
  else {
    $truncation = NULL;
  }

  $entry->{$_fields['message']} = $message;
  unset($message);

  // Use a milliseconds timestamp instead of watchdog()'s seconds timestamp.
  $millis = round(microtime(TRUE) * 1000);
  $seconds = (int) floor($millis / 1000);
  $millis -= $seconds * 1000;
  $millis = str_pad($millis, 3, '0', STR_PAD_LEFT);
  $entry->{$_fields['timestamp']} = substr(gmdate('c', $seconds), 0, 19) . '.' . $millis . 'Z';

  $entry->{$_fields['version']} = $_version;
  $entry->{$_fields['event_id']} = uniqid($_site_id, TRUE);
  $entry->{$_fields['site_id']} = $_site_id;
  $entry->{$_fields['type']} = $log_entry['type'];

  $entry->{$_fields['severity']} = $_severity[$log_entry['severity']];

  $entry->{$_fields['method']} = !empty($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'cli';
  $entry->{$_fields['request_uri']} = $log_entry['request_uri'];
  $entry->{$_fields['referer']} = $log_entry['referer'];

  $entry->{$_fields['uid']} = $uid = $log_entry['uid'];
  $entry->{$_fields['username']} = $uid && !empty($GLOBALS['user']->name) ? $GLOBALS['user']->name : '';

  $entry->{$_fields['ip']} = $log_entry['ip'];
  $entry->{$_fields['link']} = !$log_entry['link'] ? NULL : strip_tags($log_entry['link']);
  $entry->{$_fields['variables']} = $variables;
  $entry->{$_fields['truncation']} = $truncation;


  // File append. If failure: log filing error to web server's default log.
  if (!file_put_contents($_file, "\n" . drupal_json_encode($entry), FILE_APPEND)) {
    error_log('Drupal jsonlog, site ID[' . $_site_id . '], failed to write to file[' . $_file . '].');
  }
}
